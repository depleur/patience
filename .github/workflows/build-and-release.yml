name: Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        run: pyinstaller --onefile --windowed --add-data "images:images" main.py

      - name: Rename executable
        run: |
          cd dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv main.exe patience-${{ matrix.os }}.exe
          else
            mv main patience-${{ matrix.os }}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: patience-${{ matrix.os }}
          path: dist/patience-*

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;

            for (let artifact of ['patience-ubuntu-latest', 'patience-windows-latest', 'patience-macos-latest']) {
              const files = await fs.readdir(artifact);
              for (let file of files) {
                await github.rest.repos.uploadReleaseAsset({
                  owner,
                  repo,
                  release_id: ${{ steps.create_release.outputs.id }},
                  name: file,
                  data: await fs.readFile(`${artifact}/${file}`)
                });
              }
            }
